// Generated by gencpp from file tapir/simRosCopyPasteObjectsResponse.msg
// DO NOT EDIT!


#ifndef TAPIR_MESSAGE_SIMROSCOPYPASTEOBJECTSRESPONSE_H
#define TAPIR_MESSAGE_SIMROSCOPYPASTEOBJECTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tapir
{
template <class ContainerAllocator>
struct simRosCopyPasteObjectsResponse_
{
  typedef simRosCopyPasteObjectsResponse_<ContainerAllocator> Type;

  simRosCopyPasteObjectsResponse_()
    : result(0)
    , newObjectHandles()  {
    }
  simRosCopyPasteObjectsResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , newObjectHandles(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _newObjectHandles_type;
  _newObjectHandles_type newObjectHandles;




  typedef boost::shared_ptr< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct simRosCopyPasteObjectsResponse_

typedef ::tapir::simRosCopyPasteObjectsResponse_<std::allocator<void> > simRosCopyPasteObjectsResponse;

typedef boost::shared_ptr< ::tapir::simRosCopyPasteObjectsResponse > simRosCopyPasteObjectsResponsePtr;
typedef boost::shared_ptr< ::tapir::simRosCopyPasteObjectsResponse const> simRosCopyPasteObjectsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace tapir

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'tapir': ['/home/crazy/Desktop/catkin_ws/src/tapir/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33b2dafaeb9036bc8402196ac964ff11";
  }

  static const char* value(const ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33b2dafaeb9036bcULL;
  static const uint64_t static_value2 = 0x8402196ac964ff11ULL;
};

template<class ContainerAllocator>
struct DataType< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tapir/simRosCopyPasteObjectsResponse";
  }

  static const char* value(const ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result\n\
int32[] newObjectHandles\n\
\n\
";
  }

  static const char* value(const ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.newObjectHandles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simRosCopyPasteObjectsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tapir::simRosCopyPasteObjectsResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "newObjectHandles[]" << std::endl;
    for (size_t i = 0; i < v.newObjectHandles.size(); ++i)
    {
      s << indent << "  newObjectHandles[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.newObjectHandles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAPIR_MESSAGE_SIMROSCOPYPASTEOBJECTSRESPONSE_H
